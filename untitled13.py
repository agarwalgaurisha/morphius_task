# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13JRAo1jddj2VrVPiDbUZtz9UIcDGR3zi
"""

import streamlit as st
import os
import shutil
import fitz  # PyMuPDF
from docx import Document
from PIL import Image
import re
from io import BytesIO

# üìÅ Setup output folders
OUTPUT_DIR = "output"
IMAGE_DIR = os.path.join(OUTPUT_DIR, "images")
os.makedirs(IMAGE_DIR, exist_ok=True)

# üß† Filtering logic
def is_formula(line):
    line = line.strip()
    if not line or len(line) > 120: return False
    if re.search(r'^(Ans:|Q\d+\.|Fig|Figure|\(i\)|\(ii\)|\d+\.)', line, re.I): return False
    math_score = sum(c in line for c in "=+\\-*/^‚àöœÄŒ£‚àë<>%|{}()[]:")
    words = re.findall(r'\b[a-zA-Z]{4,}\b', line)
    return math_score >= 2 and len(words) <= 3

def clean_text_line(line):
    line = line.strip()
    if not line or len(line) < 5: return ""
    if is_formula(line): return ""
    if re.match(r'^(Fig|Q\d+\.|Ans:|Figure|\(i\)|\d+\.)', line, re.I): return ""
    return " ".join(w for w in line.split() if len(w) > 1)

# üîç Extract from docx
def extract_docx(file):
    doc = Document(file)
    formulas, texts = [], []
    count = 0

    for para in doc.paragraphs:
        line = para.text.strip()
        if not line: continue
        if is_formula(line):
            formulas.append(line)
        else:
            clean = clean_text_line(line)
            if clean:
                texts.append(clean)

    # Extract images
    for rel in doc.part._rels.values():
        if "image" in rel.target_ref:
            count += 1
            img_data = rel.target_part.blob
            img_path = os.path.join(IMAGE_DIR, f"image_{count}.png")
            with open(img_path, "wb") as f:
                f.write(img_data)

    return formulas, texts

# üîç Extract from PDF
def extract_pdf(file):
    doc = fitz.open(stream=file.read(), filetype="pdf")
    formulas, texts = [], []
    img_count = 0

    for page_num, page in enumerate(doc):
        for line in page.get_text().split("\n"):
            line = line.strip()
            if not line: continue
            if is_formula(line):
                formulas.append(line)
            else:
                clean = clean_text_line(line)
                if clean:
                    texts.append(clean)

        # Extract images
        for img_index, img in enumerate(page.get_images(full=True), 1):
            xref = img[0]
            base = doc.extract_image(xref)
            image_bytes = base["image"]
            ext = base["ext"]
            img_count += 1
            img_path = os.path.join(IMAGE_DIR, f"image_{img_count}.{ext}")
            with open(img_path, "wb") as f:
                f.write(image_bytes)

    return formulas, texts

# üíæ Save results to text
def save_results(formulas, texts):
    formulas_path = os.path.join(OUTPUT_DIR, "formulas.txt")
    text_path = os.path.join(OUTPUT_DIR, "text.txt")
    with open(formulas_path, "w", encoding="utf-8") as f:
        f.write("\n".join(formulas))
    with open(text_path, "w", encoding="utf-8") as f:
        f.write("\n".join(texts))
    return formulas_path, text_path

# üßº Reset output
def reset_output():
    if os.path.exists(OUTPUT_DIR):
        shutil.rmtree(OUTPUT_DIR)
    os.makedirs(IMAGE_DIR, exist_ok=True)

# üéØ Streamlit UI
st.title("üìÑ Formula & Text Extractor")
st.markdown("Upload a `.pdf` or `.docx` file. This app will:")
st.markdown("- üìê Extract **formulas** into `formulas.txt`")
st.markdown("- üìù Extract clean **text** into `text.txt`")
st.markdown("- üñºÔ∏è Save images in the `images/` folder")

uploaded_file = st.file_uploader("Upload File", type=["pdf", "docx"])

if uploaded_file:
    reset_output()
    ext = uploaded_file.name.split('.')[-1].lower()
    st.success(f"Uploaded: {uploaded_file.name}")

    with st.spinner("Processing file..."):
        if ext == "pdf":
            formulas, texts = extract_pdf(uploaded_file)
        elif ext == "docx":
            formulas, texts = extract_docx(uploaded_file)
        else:
            st.error("Unsupported file type.")
            st.stop()

        formulas_path, text_path = save_results(formulas, texts)

    st.success("Extraction complete!")

    # Download buttons
    with open(formulas_path, "rb") as f:
        st.download_button("üì• Download Formulas", f, file_name="formulas.txt")
    with open(text_path, "rb") as f:
        st.download_button("üì• Download Text", f, file_name="text.txt")

    # Show image previews
    image_files = sorted(os.listdir(IMAGE_DIR))
    if image_files:
        st.subheader("üñº Extracted Images:")
        for img_file in image_files:
            img_path = os.path.join(IMAGE_DIR, img_file)
            st.image(img_path, caption=img_file, width=300)
            with open(img_path, "rb") as f:
                st.download_button(f"Download {img_file}", f, file_name=img_file)
    else:
        st.info("No images found in this file.")